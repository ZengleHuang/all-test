package com.spring13269.leetcode.Q401_500;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Q491
 *
 * @author : zengle.huang@hand-china.com 2020/8/25
 */
public class Q491 {
    /**
     * 给定一个整型数组, 你的任务是找到所有该数组的递增子序列，递增子序列的长度至少是2。
     *
     * 示例:
     *
     * 输入: [4, 6, 7, 7]
     * 输出: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]
     * 说明:
     *
     * 给定数组的长度不会超过15。
     * 数组中的整数范围是 [-100,100]。
     * 给定数组中可能包含重复数字，相等的数字应该被视为递增的一种情况。
     */

    public static List<List<Integer>> findSubsequences(int[] nums) {
        if (nums.length < 2) {
            return new ArrayList<>();
        }
        //Arrays.parallelSort(nums);
        int all = nums.length;
        System.out.println(Arrays.toString(nums));
        int nbit = 1 << all;
        System.out.println(nbit);
        Map<Integer, List<Integer>> result = new HashMap<>();
        for (int i = 0; i < nbit; i++) {
            List<Integer> child = new ArrayList<>(nums.length);
            boolean flag = true;
            for (int j = 0; j <= all; j++) {
                if ((i & (1 << j)) != 0) {
                    //System.out.println("i" + i + " j "+ j);
                    child.add(nums[j]);
                    int index = child.size()-1;
                    if (index -1 >= 0 && child.get(index) < child.get(index-1)) {
                        flag = false;
                        break;
                    }
                }
            }
            if (child.size() > 1 && flag && !result.containsKey(child.hashCode())) {
                result.put(child.hashCode(), child);
                System.out.println(Arrays.toString(child.toArray()));
            }
            //child.clear();
        }
        return new ArrayList<>(result.values());
    }

    public static void main(String[] args) {
        findSubsequences(new int[]{4,6,7,8,9,8,-19,-2,0,7});
        //"[84,-48,-33,-34,-52,72,75,-12,72,-45]";
    }
    /*[[-52,-12,72],[-33,72,75],[72,72],[-52,72],[-48,75],[-48,-33,75],[72,75],[-48,72],[-48,-33,72],[-33,-12],[-33,72],[-33,75],[-48,72,75],[-48,72,72],[-34,75],[-52,72,75],[-48,-33,-12,72],[-34,72],[-52,72,72],[-48,-34,-12,72],[-12,72],[-52,-12],[-48,-12],[-48,-33,-12],[-48,-34,75],[-48,-33,72,75],[-48,-34,72,75],[-48,-34,72],[-48,-33,72,72],[-34,-12],[-33,-12,72],[-34,-12,72],[-48,-33],[-48,-34],[-52,-45],[-48,-34,72,72],[-48,-34,-12],[-48,-45],[-48,-12,72],[-33,72,72],[-52,75]]
    [[-52,-12,72],[72,72],[-52,72],[72,75],[-48,72],,[-33,-12],[-33,72],[-33,75],[-34,75],[-52,72,75],[-34,72],[-52,72,72],[-48,-34,-12,72],[-12,72],[-52,-12],[-48,-12],[-48,-34,75],[-48,-34,72],[-34,-12],[-34,-12,72],[-48,-34],[-52,-45],[-48,-34,-12],[-48,-45],[-52,75]]
    [[-48,-34],[-48,-34,72],[-48,-34,75],[-48,-34,-12],[-48,-34,-12,72],[-48,72],[-48,-12],[-48,-45],[-33,72],[-33,75],[-33,-12],[-34,72],[-34,72,75],[-34,72,72],[-34,75],[-34,-12],[-34,-12,72],[-52,72],[-52,72,75],[-52,72,72],[-52,75],[-52,-12],[-52,-12,72],[-52,-45],[72,75],[72,72],[-12,72]]
    [[-48,-33],[-48,-33,72],[-48,-33,72,75],[-48,-33,72,72],[-48,-33,75],[-48,-33,-12],[-48,-33,-12,72],[-48,-34],[-48,-34,72],[-48,-34,72,75],[-48,-34,72,72],[-48,-34,75],[-48,-34,-12],[-48,-34,-12,72],[-48,72],[-48,72,75],[-48,72,72],[-48,75],[-48,-12],[-48,-12,72],[-48,-45],[-33,72],[-33,72,75],[-33,72,72],[-33,75],[-33,-12],[-33,-12,72],[-34,72],[-34,72,75],[-34,72,72],[-34,75],[-34,-12],[-34,-12,72],[-52,72],[-52,72,75],[-52,72,72],[-52,75],[-52,-12],[-52,-12,72],[-52,-45],[72,75],[72,72],[-12,72]]
*/}
